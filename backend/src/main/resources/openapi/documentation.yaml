openapi: "3.1.0"
info:
  title: "TableTennisTrainingSystem API"
  description: "API documentation for the Table Tennis Training System"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
tags:
  - name: "用户认证"
    description: "用户注册、登录、登出相关接口"
  - name: "用户管理"
    description: "用户信息查询和管理接口"
  - name: "消息系统"
    description: "站内消息相关接口"
  - name: "钱包系统"
    description: "钱包充值和查询相关接口"
  - name: "校区管理"
    description: "校区信息管理相关接口"
paths:
  /user/signup:
    post:
      tags:
        - "用户认证"
      summary: "用户注册"
      description: "允许学生或教练注册账户"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
            examples:
              student_example:
                summary: "学生注册示例"
                value:
                  username: "student001"
                  plainPassword: "password123"
                  realName: "张三"
                  gender: "男"
                  age: 20
                  phoneNumber: "13800138000"
                  email: "student@example.com"
                  campusId: 1
                  role: "STUDENT"
                  status: "ACTIVE"
                  studentInfo:
                    balance: 100.0
                    maxCoach: 3
                    currentCoach: 0
              coach_example:
                summary: "教练注册示例"
                value:
                  username: "coach001"
                  plainPassword: "password123"
                  realName: "李教练"
                  gender: "女"
                  age: 35
                  phoneNumber: "13900139000"
                  email: "coach@example.com"
                  campusId: 1
                  role: "COACH"
                  status: "ACTIVE"
                  coachInfo:
                    hourlyRate: 100.0
                    balance: 0.0
                    maxStudents: 20
                    currentStudents: 0
                    isApproved: false
                    approvedBy: -1
        required: true
      responses:
        "201":
          description: "注册成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  userId:
                    type: "string"
              examples:
                success:
                  value:
                    message: "注册成功"
                    userId: "550e8400-e29b-41d4-a716-446655440000"
        "400":
          description: "请求参数错误"
          content:
            text/plain:
              schema:
                type: "string"
  /user/login:
    post:
      tags:
        - "用户认证"
      summary: "用户登录"
      description: "通过表单验证用户身份"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
              required:
                - "username"
                - "password"
            examples:
              login_example:
                summary: "登录示例"
                value:
                  username: "student001"
                  password: "password123"
      responses:
        "200":
          description: "登录成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                student_response:
                  summary: "学生登录响应"
                  value:
                    uuid: "550e8400-e29b-41d4-a716-446655440000"
                    username: "student001"
                    realName: "张三"
                    gender: "男"
                    age: 20
                    phoneNumber: "13800138000"
                    email: "student@example.com"
                    campusId: 1
                    role: "STUDENT"
                    status: "ACTIVE"
                    studentInfo:
                      balance: 100.0
                      maxCoach: 3
                      currentCoach: 0
        "401":
          description: "认证失败"
  /user/logout:
    post:
      tags:
        - "用户认证"
      summary: "用户登出"
      description: "清除用户会话"
      responses:
        "200":
          description: "登出成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "登出成功"
  /user/info:
    get:
      tags:
        - "用户管理"
      summary: "获取用户信息"
      description: "获取当前登录用户的信息"
      responses:
        "200":
          description: "返回用户信息"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "未认证"
    put:
      tags:
        - "用户管理"
      summary: "更新用户信息"
      description: "更新当前登录用户的信息"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
            examples:
              student_update:
                summary: "学生更新信息示例"
                value:
                  uuid: "550e8400-e29b-41d4-a716-446655440000"
                  username: "student001"
                  realName: "张三"
                  gender: "男"
                  age: 21
                  phoneNumber: "13800138000"
                  email: "student@example.com"
                  campusId: 1
                  role: "STUDENT"
                  status: "ACTIVE"
                  studentInfo:
                    balance: 80.0
                    maxCoach: 3
                    currentCoach: 1
        required: true
      responses:
        "200":
          description: "更新成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "用户信息更新成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
  /user/change-password:
    put:
      tags:
        - "用户管理"
      summary: "修改密码"
      description: "用户修改自己的密码"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                oldPassword:
                  type: "string"
                newPassword:
                  type: "string"
              required:
                - "oldPassword"
                - "newPassword"
            examples:
              change_password:
                summary: "修改密码示例"
                value:
                  oldPassword: "oldpassword123"
                  newPassword: "newpassword456"
        required: true
      responses:
        "200":
          description: "修改成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "密码修改成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
  /user/users:
    get:
      tags:
        - "用户管理"
      summary: "获取用户列表"
      description: "分页获取用户列表，支持过滤"
      parameters:
        - name: "page"
          in: "query"
          description: "页码，从1开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 1
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 10
        - name: "role"
          in: "query"
          description: "用户角色过滤"
          required: false
          schema:
            type: "string"
            enum:
              - "SUPER_ADMIN"
              - "CAMPUS_ADMIN"
              - "COACH"
              - "STUDENT"
        - name: "campusId"
          in: "query"
          description: "校区ID过滤"
          required: false
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "返回用户列表"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  users:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/User"
                  totalCount:
                    type: "integer"
                    format: "int64"
                  page:
                    type: "integer"
                    format: "int32"
                  size:
                    type: "integer"
                    format: "int32"
                  totalPages:
                    type: "integer"
                    format: "int32"
              examples:
                user_list:
                  value:
                    users:
                      - uuid: "550e8400-e29b-41d4-a716-446655440000"
                        username: "student001"
                        realName: "张三"
                        gender: "男"
                        age: 20
                        phoneNumber: "13800138000"
                        email: "student@example.com"
                        campusId: 1
                        role: "STUDENT"
                        status: "ACTIVE"
                        studentInfo:
                          balance: 100.0
                          maxCoach: 3
                          currentCoach: 0
                    totalCount: 1
                    page: 1
                    size: 10
                    totalPages: 1
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
  /user/create:
    post:
      tags:
        - "用户管理"
      summary: "创建用户"
      description: "超级管理员创建校区管理员"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
            examples:
              campus_admin_create:
                summary: "创建校区管理员示例"
                value:
                  username: "campusadmin001"
                  plainPassword: "password123"
                  realName: "王管理员"
                  gender: "男"
                  age: 30
                  phoneNumber: "13700137000"
                  email: "campusadmin@example.com"
                  campusId: 1
                  role: "CAMPUS_ADMIN"
                  status: "ACTIVE"
        required: true
      responses:
        "201":
          description: "创建成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  userId:
                    type: "string"
              examples:
                success:
                  value:
                    message: "校区管理员创建成功"
                    userId: "550e8400-e29b-41d4-a716-446655440001"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /user/{userId}:
    delete:
      tags:
        - "用户管理"
      summary: "删除用户"
      description: "超级管理员删除校区管理员"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "删除成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "校区管理员删除成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /user/{userId}/reset-password:
    put:
      tags:
        - "用户管理"
      summary: "重置用户密码"
      description: "超级管理员重置校区管理员密码"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "重置成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "校区管理员密码已重置为默认密码"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /user/users/{username}:
    get:
      tags:
        - "用户管理"
      summary: "根据用户名获取用户信息"
      description: "超级管理员根据用户名查询用户详细信息"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "返回用户信息"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
        "404":
          description: "用户不存在"
  /messages:
    get:
      tags:
        - "消息系统"
      summary: "获取消息列表"
      description: "获取当前用户的消息列表，支持分页和过滤"
      parameters:
        - name: "type"
          in: "query"
          description: "消息类型过滤"
          required: false
          schema:
            type: "string"
        - name: "unreadOnly"
          in: "query"
          description: "只获取未读消息"
          required: false
          schema:
            type: "boolean"
            default: false
        - name: "page"
          in: "query"
          description: "页码，从0开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 0
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 20
      responses:
        "200":
          description: "返回消息列表"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageListResponse"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
    post:
      tags:
        - "消息系统"
      summary: "发送消息"
      description: "发送消息给指定用户（仅限超级管理员）"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMessageRequest"
            examples:
              send_message:
                summary: "发送消息示例"
                value:
                  recipientId: "550e8400-e29b-41d4-a716-446655440000"
                  title: "系统通知"
                  content: "欢迎使用乒乓球训练系统"
                  type: "SYSTEM"
        required: true
      responses:
        "201":
          description: "消息发送成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    id: "550e8400-e29b-41d4-a716-446655440002"
                    message: "消息发送成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /messages/unread-count:
    get:
      tags:
        - "消息系统"
      summary: "获取未读消息数量"
      description: "获取当前用户的未读消息数量"
      responses:
        "200":
          description: "返回未读消息数量"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnreadCountResponse"
              examples:
                unread_count:
                  value:
                    count: 5
        "401":
          description: "未认证"
  /messages/{id}/read:
    put:
      tags:
        - "消息系统"
      summary: "标记消息为已读"
      description: "将指定消息标记为已读"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "标记成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  success:
                    type: "boolean"
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    success: true
                    message: "消息已标记为已读"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "404":
          description: "消息不存在"
  /messages/read-all:
    put:
      tags:
        - "消息系统"
      summary: "标记所有消息为已读"
      description: "将所有未读消息标记为已读"
      responses:
        "200":
          description: "标记成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  success:
                    type: "boolean"
                  message:
                    type: "string"
                  count:
                    type: "integer"
              examples:
                success:
                  value:
                    success: true
                    message: "成功标记 5 条消息为已读"
                    count: 5
        "401":
          description: "未认证"
  /messages/{id}:
    delete:
      tags:
        - "消息系统"
      summary: "删除消息"
      description: "删除指定消息"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "删除成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "404":
          description: "消息不存在"
  /wallet/balance:
    get:
      tags:
        - "钱包系统"
      summary: "获取钱包余额"
      description: "获取当前登录用户的钱包余额"
      responses:
        "200":
          description: "返回钱包余额"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  balance:
                    type: "number"
                    format: "float"
              examples:
                balance_response:
                  value:
                    balance: 100.0
        "401":
          description: "未认证"
  /wallet/recharge:
    post:
      tags:
        - "钱包系统"
      summary: "学生充值钱包"
      description: "学生用户进行钱包充值"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RechargeRequest"
            examples:
              recharge_example:
                summary: "充值示例"
                value:
                  amount: 50.0
        required: true
      responses:
        "200":
          description: "充值成功，返回当前余额"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  balance:
                    type: "number"
                    format: "float"
              examples:
                success:
                  value:
                    balance: 150.0
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /wallet/recharge/history:
    get:
      tags:
        - "钱包系统"
      summary: "获取充值记录"
      description: "获取当前登录用户的充值历史记录"
      parameters:
        - name: "page"
          in: "query"
          description: "页码，从1开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 1
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 10
      responses:
        "200":
          description: "返回充值记录列表"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RechargeRecord"
        "401":
          description: "未认证"
  /wallet/recharge/records:
    get:
      tags:
        - "钱包系统"
      summary: "获取所有充值记录"
      description: "超级管理员查看所有用户的充值记录"
      parameters:
        - name: "page"
          in: "query"
          description: "页码，从1开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 1
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 10
      responses:
        "200":
          description: "返回充值记录列表"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RechargeRecord"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
  /wallet/recharge/records/{username}:
    get:
      tags:
        - "钱包系统"
      summary: "按用户名获取充值记录"
      description: "超级管理员查看指定用户的充值记录"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "page"
          in: "query"
          description: "页码，从1开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 1
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 10
      responses:
        "200":
          description: "返回充值记录列表"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RechargeRecord"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
        "404":
          description: "用户不存在"
  /campus/names:
    get:
      tags:
        - "校区管理"
      summary: "获取校区列表"
      description: "获取所有校区名称列表，支持分页"
      parameters:
        - name: "page"
          in: "query"
          description: "页码，从1开始"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 1
        - name: "size"
          in: "query"
          description: "每页大小"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 10
      responses:
        "200":
          description: "返回校区列表"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  campuses:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Campus"
                  totalCount:
                    type: "integer"
                    format: "int64"
                  page:
                    type: "integer"
                    format: "int32"
                  size:
                    type: "integer"
                    format: "int32"
                  totalPages:
                    type: "integer"
                    format: "int32"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
  /campus/create:
    post:
      tags:
        - "校区管理"
      summary: "创建校区"
      description: "超级管理员创建新校区"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CampusCreateRequest"
            examples:
              campus_create:
                summary: "创建校区示例"
                value:
                  campusName: "海淀校区"
                  address: "北京市海淀区中关村大街1号"
                  contactPerson: "张主任"
                  phone: "010-12345678"
                  email: "hd@ttts.edu.cn"
        required: true
      responses:
        "201":
          description: "创建成功"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
              examples:
                success:
                  value:
                    message: "创建校区成功"
        "400":
          description: "请求参数错误"
        "401":
          description: "未认证"
        "403":
          description: "权限不足"
components:
  schemas:
    UserCreateRequest:
      type: "object"
      properties:
        username:
          type: "string"
        plainPassword:
          type: "string"
        realName:
          type: "string"
        gender:
          type: "string"
        age:
          type: "integer"
          format: "int32"
        phoneNumber:
          type: "string"
        email:
          type: "string"
        campusId:
          type: "integer"
          format: "int32"
        role:
          type: "string"
          enum:
            - "SUPER_ADMIN"
            - "CAMPUS_ADMIN"
            - "COACH"
            - "STUDENT"
        status:
          type: "string"
        studentInfo:
          $ref: "#/components/schemas/StudentInfo"
        coachInfo:
          $ref: "#/components/schemas/CoachInfo"
      required:
        - "username"
        - "plainPassword"
        - "realName"
        - "gender"
        - "age"
        - "phoneNumber"
        - "email"
        - "campusId"
        - "role"
        - "status"
    UserUpdateRequest:
      type: "object"
      properties:
        uuid:
          type: "string"
        username:
          type: "string"
        realName:
          type: "string"
        gender:
          type: "string"
        age:
          type: "integer"
          format: "int32"
        phoneNumber:
          type: "string"
        email:
          type: "string"
        campusId:
          type: "integer"
          format: "int32"
        role:
          type: "string"
          enum:
            - "SUPER_ADMIN"
            - "CAMPUS_ADMIN"
            - "COACH"
            - "STUDENT"
        status:
          type: "string"
        studentInfo:
          $ref: "#/components/schemas/StudentInfo"
        coachInfo:
          $ref: "#/components/schemas/CoachInfo"
      required:
        - "uuid"
        - "username"
        - "realName"
        - "gender"
        - "age"
        - "phoneNumber"
        - "email"
        - "campusId"
        - "role"
        - "status"
    User:
      type: "object"
      properties:
        uuid:
          type: "string"
        username:
          type: "string"
        realName:
          type: "string"
        gender:
          type: "string"
        age:
          type: "integer"
          format: "int32"
        phoneNumber:
          type: "string"
        email:
          type: "string"
        campusId:
          type: "integer"
          format: "int32"
        role:
          type: "string"
          enum:
            - "SUPER_ADMIN"
            - "CAMPUS_ADMIN"
            - "COACH"
            - "STUDENT"
        status:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        lastLoginAt:
          type: "string"
          format: "date-time"
        studentInfo:
          $ref: "#/components/schemas/StudentInfo"
        coachInfo:
          $ref: "#/components/schemas/CoachInfo"
      required:
        - "uuid"
        - "username"
        - "realName"
        - "gender"
        - "age"
        - "phoneNumber"
        - "email"
        - "campusId"
        - "role"
        - "status"
    StudentInfo:
      type: "object"
      properties:
        balance:
          type: "number"
          format: "float"
        maxCoach:
          type: "integer"
          format: "int32"
        currentCoach:
          type: "integer"
          format: "int32"
      required:
        - "balance"
        - "maxCoach"
        - "currentCoach"
    CoachInfo:
      type: "object"
      properties:
        photoUrl:
          type: "string"
          nullable: true
        achievements:
          type: "string"
          nullable: true
        level:
          type: "string"
          nullable: true
        hourlyRate:
          type: "number"
          format: "float"
        balance:
          type: "number"
          format: "float"
        maxStudents:
          type: "integer"
          format: "int32"
        currentStudents:
          type: "integer"
          format: "int32"
        isApproved:
          type: "boolean"
        approvedBy:
          type: "integer"
          format: "int32"
      required:
        - "hourlyRate"
        - "balance"
        - "maxStudents"
        - "currentStudents"
        - "isApproved"
        - "approvedBy"
    CreateMessageRequest:
      type: "object"
      properties:
        recipientId:
          type: "string"
        title:
          type: "string"
        content:
          type: "string"
        type:
          type: "string"
      required:
        - "recipientId"
        - "title"
        - "content"
        - "type"
    Message:
      type: "object"
      properties:
        id:
          type: "string"
        senderId:
          type: "string"
          nullable: true
        recipientId:
          type: "string"
        title:
          type: "string"
        content:
          type: "string"
        type:
          type: "string"
        isRead:
          type: "boolean"
        createdAt:
          type: "string"
          format: "date-time"
        readAt:
          type: "string"
          format: "date-time"
          nullable: true
      required:
        - "id"
        - "recipientId"
        - "title"
        - "content"
        - "type"
        - "isRead"
        - "createdAt"
    MessageListResponse:
      type: "object"
      properties:
        messages:
          type: "array"
          items:
            $ref: "#/components/schemas/Message"
        totalCount:
          type: "integer"
          format: "int64"
      required:
        - "messages"
        - "totalCount"
    UnreadCountResponse:
      type: "object"
      properties:
        count:
          type: "integer"
          format: "int32"
      required:
        - "count"
    RechargeRequest:
      type: "object"
      properties:
        amount:
          type: "number"
          format: "float"
      required:
        - "amount"
    RechargeRecord:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "string"
        amount:
          type: "number"
          format: "float"
        balanceAfter:
          type: "number"
          format: "float"
        createdAt:
          type: "string"
          format: "date-time"
        description:
          type: "string"
      required:
        - "id"
        - "userId"
        - "amount"
        - "balanceAfter"
        - "createdAt"
        - "description"
    CampusCreateRequest:
      type: "object"
      properties:
        campusName:
          type: "string"
        address:
          type: "string"
        contactPerson:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
      required:
        - "campusName"
        - "address"
        - "contactPerson"
        - "phone"
        - "email"
    Campus:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        campusName:
          type: "string"
        address:
          type: "string"
        contactPerson:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
      required:
        - "id"
        - "campusName"
        - "address"
        - "contactPerson"
        - "phone"
        - "email"