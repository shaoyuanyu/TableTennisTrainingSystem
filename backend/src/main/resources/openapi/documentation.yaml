openapi: 3.0.3
info:
  title: 乒乓球训练系统后端API
  description: 乒乓球训练系统双选系统的完整API文档
  version: 1.0.0
  contact:
    name: 乒乓球训练系统开发团队
    email: support@ttts.example.com

servers:
  - url: http://localhost:8080
    description: 本地开发服务器
  - url: https://api.ttts.example.com
    description: 生产环境服务器

tags:
  - name: user
    description: 用户管理相关接口
  - name: auth
    description: 认证相关接口
  - name: mutual-selection
    description: 双选系统相关接口
  - name: message
    description: 消息系统相关接口
  - name: coach
    description: 教练管理相关接口
  - name: campus
    description: 校区管理相关接口
  - name: wallet
    description: 钱包系统相关接口
  - name: competition
    description: 竞赛系统相关接口

security:
  - SessionAuth: []

paths:
  # 用户管理接口
  /user/signup:
    post:
      tags: [user]
      summary: 用户注册
      description: 学生或教练注册账户
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "注册成功"
                  userId:
                    type: string
                    example: "uuid-string"
        '400':
          $ref: '#/components/responses/BadRequest'

  /user/login:
    post:
      tags: [auth]
      summary: 用户登录
      description: 用户使用用户名和密码登录
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/logout:
    post:
      tags: [auth]
      summary: 用户登出
      description: 清除用户会话
      responses:
        '200':
          description: 登出成功

  /user/info:
    get:
      tags: [user]
      summary: 获取用户信息
      description: 获取当前登录用户的详细信息
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    put:
      tags: [user]
      summary: 更新用户信息
      description: 更新当前登录用户的信息
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "用户信息更新成功"
        '400':
          $ref: '#/components/responses/BadRequest'

  /user/change-password:
    put:
      tags: [user]
      summary: 修改密码
      description: 用户修改自己的密码
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: 旧密码
                newPassword:
                  type: string
                  description: 新密码
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: 密码修改成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "密码修改成功"
        '400':
          $ref: '#/components/responses/BadRequest'

  /user/users:
    get:
      tags: [user]
      summary: 获取所有用户（分页）
      description: 获取用户列表，支持分页和过滤。仅限超级管理员
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: role
          in: query
          schema:
            $ref: '#/components/schemas/UserRole'
        - name: campusId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: 用户列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  size:
                    type: integer
                  totalPages:
                    type: integer

  /user/create:
    post:
      tags: [user]
      summary: 管理员创建用户
      description: 超级管理员创建新用户
      security:
        - SessionAuth: [SUPER_ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 用户创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "校区管理员创建成功"
                  userId:
                    type: string

  /user/{userId}:
    delete:
      tags: [user]
      summary: 删除用户
      description: 超级管理员删除用户
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "校区管理员删除成功"

  /user/{userId}/reset-password:
    put:
      tags: [user]
      summary: 重置用户密码
      description: 超级管理员重置用户密码为默认密码
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 密码重置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "校区管理员密码已重置为默认密码"

  /user/users/{username}:
    get:
      tags: [user]
      summary: 根据用户名获取用户信息
      description: 超级管理员根据用户名查询用户详细信息
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  # 双选系统接口
  /mutual-selection/apply:
    post:
      tags: [mutual-selection]
      summary: 学生申请教练
      description: 学生向教练提交申请
      security:
        - SessionAuth: [STUDENT]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                coachId:
                  type: string
                  description: 教练ID
              required:
                - coachId
      responses:
        '201':
          description: 申请提交成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutualSelection'

  /mutual-selection/student-applications:
    get:
      tags: [mutual-selection]
      summary: 获取学生申请记录
      description: 学生查看自己的申请记录
      security:
        - SessionAuth: [STUDENT]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 申请记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MutualSelection'

  /mutual-selection/withdraw:
    post:
      tags: [mutual-selection]
      summary: 学生撤回申请
      description: 学生撤回对教练的申请
      security:
        - SessionAuth: [STUDENT]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                relationId:
                  type: string
                  description: 关系ID
              required:
                - relationId
      responses:
        '200':
          description: 撤回成功

  /mutual-selection/cancel-approved:
    post:
      tags: [mutual-selection]
      summary: 学生取消已批准的关系
      description: 学生取消已经建立的师生关系
      security:
        - SessionAuth: [STUDENT]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                relationId:
                  type: string
                  description: 关系ID
              required:
                - relationId
      responses:
        '200':
          description: 取消成功

  /mutual-selection/student/current-coaches:
    get:
      tags: [mutual-selection]
      summary: 获取学生当前教练列表
      description: 学生查看当前已建立关系的教练列表
      security:
        - SessionAuth: [STUDENT]
      responses:
        '200':
          description: 教练列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoachRecord'

  /mutual-selection/coach-applications:
    get:
      tags: [mutual-selection]
      summary: 获取教练收到的申请
      description: 教练查看收到的学生申请
      security:
        - SessionAuth: [COACH]
      parameters:
        - name: status
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 申请记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MutualSelection'

  /mutual-selection/review:
    post:
      tags: [mutual-selection]
      summary: 教练审核学生申请
      description: 教练批准或拒绝学生申请
      security:
        - SessionAuth: [COACH]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                selectionId:
                  type: string
                  description: 关系ID
                approve:
                  type: boolean
                  description: 是否批准
              required:
                - selectionId
                - approve
      responses:
        '200':
          description: 审核完成

  /mutual-selection/coach/current-students:
    get:
      tags: [mutual-selection]
      summary: 获取教练当前学生列表
      description: 教练查看当前已建立关系的学生列表
      security:
        - SessionAuth: [COACH]
      responses:
        '200':
          description: 学生列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

  /mutual-selection/coach/historical-students:
    get:
      tags: [mutual-selection]
      summary: 获取教练历史学生列表
      description: 教练查看历史学生列表（包括已结束关系的学生）
      security:
        - SessionAuth: [COACH]
      responses:
        '200':
          description: 学生列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

  /mutual-selection/admin-create:
    post:
      tags: [mutual-selection]
      summary: 管理员直接建立关系
      description: 管理员直接建立师生关系
      security:
        - SessionAuth: [CAMPUS_ADMIN, SUPER_ADMIN]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                  description: 学生ID
                coachId:
                  type: string
                  description: 教练ID
              required:
                - studentId
                - coachId
      responses:
        '201':
          description: 关系建立成功

  /mutual-selection/all:
    get:
      tags: [mutual-selection]
      summary: 获取所有关系记录
      description: 管理员查看所有师生关系记录
      security:
        - SessionAuth: [CAMPUS_ADMIN, SUPER_ADMIN]
      parameters:
        - name: status
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 关系记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MutualSelection'

  /mutual-selection/admin/relation/{relationId}:
    get:
      tags: [mutual-selection]
      summary: 获取关系详细信息
      description: 管理员根据ID获取师生关系详细信息
      security:
        - SessionAuth: [CAMPUS_ADMIN, SUPER_ADMIN]
      parameters:
        - name: relationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 关系详细信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutualSelection'

    post:
      tags: [mutual-selection]
      summary: 更新关系信息
      description: 管理员更新师生关系信息
      security:
        - SessionAuth: [CAMPUS_ADMIN, SUPER_ADMIN]
      parameters:
        - name: relationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/MutualSelectionStatus'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutualSelection'

  # 消息系统接口
  /messages:
    get:
      tags: [message]
      summary: 获取消息列表
      description: 获取当前用户的消息列表
      parameters:
        - name: type
          in: query
          schema:
            type: string
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 消息列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageListResponse'

    post:
      tags: [message]
      summary: 发送消息
      description: 发送消息（仅限管理员）
      security:
        - SessionAuth: [SUPER_ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: 消息发送成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
                    example: "消息发送成功"

  /messages/unread-count:
    get:
      tags: [message]
      summary: 获取未读消息数量
      description: 获取当前用户未读消息数量
      responses:
        '200':
          description: 未读消息数量
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnreadCountResponse'

  /messages/{id}/read:
    put:
      tags: [message]
      summary: 标记消息为已读
      description: 标记单条消息为已读
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 标记成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "消息已标记为已读"

  /messages/read-all:
    put:
      tags: [message]
      summary: 标记所有消息为已读
      description: 标记所有消息为已读
      responses:
        '200':
          description: 标记成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "成功标记 X 条消息为已读"
                  count:
                    type: integer

  /messages/{id}:
    delete:
      tags: [message]
      summary: 删除消息
      description: 删除指定消息
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "消息删除成功"

  # 教练管理接口
  /coach/coaches:
    get:
      tags: [coach]
      summary: 获取所有教练
      description: 获取教练列表（分页）
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 教练列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoachRecord'

  /coach/queryCoach:
    post:
      tags: [coach]
      summary: 根据用户名查询教练
      description: 根据用户名查询教练信息
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCoachRequest'
      responses:
        '200':
          description: 教练信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoachRecord'
        '400':
          $ref: '#/components/responses/BadRequest'

  /coach/coaches/campusNotApproved:
    get:
      tags: [coach]
      summary: 获取本校区未审核教练
      description: 获取本校区所有未审核通过的教练（分页）
      security:
        - SessionAuth: [CAMPUS_ADMIN]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 未审核教练列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoachRecord'

  /coach/coaches/allNotApproved:
    get:
      tags: [coach]
      summary: 获取所有未审核教练
      description: 获取所有未审核通过的教练（分页）- 仅限超级管理员
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 未审核教练列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoachRecord'

  /coach/approve:
    post:
      tags: [coach]
      summary: 审核教练
      description: 审核教练并设置级别
      security:
        - SessionAuth: [CAMPUS_ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveCoachRequest'
      responses:
        '200':
          description: 审核成功

  # 校区管理接口
  /campus/names:
    get:
      tags: [campus]
      summary: 获取校区名称列表
      description: 获取所有校区名称
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 校区名称列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campus'

  /campus/create:
    post:
      tags: [campus]
      summary: 创建校区
      description: 创建新校区 - 仅限超级管理员
      security:
        - SessionAuth: [SUPER_ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampusCreateRequest'
      responses:
        '201':
          description: 校区创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "创建校区成功"

  # 钱包系统接口
  /wallet/balance:
    get:
      tags: [wallet]
      summary: 获取钱包余额
      description: 获取当前用户钱包余额
      responses:
        '200':
          description: 钱包余额
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float

  /wallet/recharge:
    post:
      tags: [wallet]
      summary: 钱包充值
      description: 学生用户进行钱包充值
      security:
        - SessionAuth: [STUDENT]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RechargeRequest'
      responses:
        '200':
          description: 充值成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float

  /wallet/recharge/history:
    get:
      tags: [wallet]
      summary: 获取充值记录
      description: 获取当前用户的充值历史记录
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 充值记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RechargeRecord'

  /wallet/recharge/records:
    get:
      tags: [wallet]
      summary: 获取所有充值记录
      description: 获取所有用户的充值记录（超级管理员）
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 充值记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RechargeRecord'

  /wallet/recharge/records/{username}:
    get:
      tags: [wallet]
      summary: 按用户名获取充值记录
      description: 获取指定用户的充值记录（超级管理员）
      security:
        - SessionAuth: [SUPER_ADMIN]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 充值记录列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RechargeRecord'

  # 竞赛系统接口
  /competition/signup:
    post:
      tags: [competition]
      summary: 竞赛报名
      description: 学生报名参加竞赛
      security:
        - SessionAuth: [STUDENT]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComsignupRequest'
      responses:
        '200':
          description: 报名成功
          content:
            application/json:
              schema:
                type: string
                example: "报名成功"

  /competition/querysignup:
    get:
      tags: [competition]
      summary: 查询比赛报名情况
      description: 学生查询自己的比赛报名情况
      security:
        - SessionAuth: [STUDENT]
      responses:
        '200':
          description: 报名详情
          content:
            application/json:
              schema:
                type: object
                description: 比赛报名详情

  /competition/campuscompetitions:
    get:
      tags: [competition]
      summary: 获取校区竞赛
      description: 获取本校区的竞赛信息
      security:
        - SessionAuth: [CAMPUS_ADMIN]
      responses:
        '200':
          description: 校区竞赛列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompetitionInfo'

  /competition/allcompetitions:
    get:
      tags: [competition]
      summary: 获取所有竞赛
      description: 获取所有竞赛信息（超级管理员）
      security:
        - SessionAuth: [SUPER_ADMIN]
      responses:
        '200':
          description: 所有竞赛列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompetitionInfo'

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: cookie
      name: KTOR_SESSION_ID

  schemas:
    UserRole:
      type: string
      enum:
        - SUPER_ADMIN
        - CAMPUS_ADMIN
        - COACH
        - STUDENT

    User:
      type: object
      properties:
        uuid:
          type: string
          nullable: true
        username:
          type: string
        plainPassword:
          type: string
          nullable: true
        encryptedPassword:
          type: string
          nullable: true
        realName:
          type: string
        gender:
          type: string
        age:
          type: integer
        phoneNumber:
          type: string
        email:
          type: string
        campusId:
          type: integer
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          type: string
        createdAt:
          type: string
          format: date-time
          nullable: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        studentInfo:
          $ref: '#/components/schemas/StudentInfo'
          nullable: true
        coachInfo:
          $ref: '#/components/schemas/CoachInfo'
          nullable: true
      required:
        - username
        - realName
        - gender
        - age
        - phoneNumber
        - email
        - campusId
        - role
        - status

    StudentInfo:
      type: object
      properties:
        balance:
          type: number
          format: float
        maxCoach:
          type: integer
        currentCoach:
          type: integer

    CoachInfo:
      type: object
      properties:
        balance:
          type: number
          format: float
        hourlyRate:
          type: number
          format: float
        maxStudents:
          type: integer
        currentStudents:
          type: integer
        isApproved:
          type: boolean
        approvedBy:
          type: string
          nullable: true
        photoUrl:
          type: string
          nullable: true
        achievements:
          type: string
          nullable: true
        level:
          type: string

    Student:
      type: object
      properties:
        uuid:
          type: string
          nullable: true
        username:
          type: string
        balance:
          type: number
          format: float
        maxCoach:
          type: integer
        currentCoach:
          type: integer
      required:
        - username
        - balance
        - maxCoach
        - currentCoach

    CoachRecord:
      type: object
      properties:
        uuid:
          type: string
        username:
          type: string
        realName:
          type: string
        gender:
          type: string
        age:
          type: integer
        phoneNumber:
          type: string
        email:
          type: string
        campusId:
          type: integer
        hourlyRate:
          type: number
          format: float
        maxStudents:
          type: integer
        currentStudents:
          type: integer
        isApproved:
          type: boolean
        photoUrl:
          type: string
          nullable: true
        achievements:
          type: string
          nullable: true
        level:
          type: string

    MutualSelectionStatus:
      type: string
      enum:
        - PENDING
        - APPROVED
        - REJECTED
        - CANCELLED

    MutualSelection:
      type: object
      properties:
        id:
          type: string
        studentId:
          type: string
        coachId:
          type: string
        status:
          $ref: '#/components/schemas/MutualSelectionStatus'
        appliedAt:
          type: string
          format: date-time
        reviewedAt:
          type: string
          format: date-time
          nullable: true
        endedAt:
          type: string
          format: date-time
          nullable: true

    Message:
      type: object
      properties:
        id:
          type: string
        senderId:
          type: string
          nullable: true
        recipientId:
          type: string
        title:
          type: string
        content:
          type: string
        type:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
          nullable: true

    CreateMessageRequest:
      type: object
      properties:
        recipientId:
          type: string
        title:
          type: string
        content:
          type: string
        type:
          type: string
      required:
        - recipientId
        - title
        - content
        - type

    MessageListResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        totalCount:
          type: integer

    UnreadCountResponse:
      type: object
      properties:
        count:
          type: integer

    Campus:
      type: object
      properties:
        id:
          type: integer
        campusName:
          type: string
        address:
          type: string
        contactPerson:
          type: string
        phone:
          type: string
        email:
          type: string

    CampusCreateRequest:
      type: object
      properties:
        campusName:
          type: string
        address:
          type: string
        contactPerson:
          type: string
        phone:
          type: string
        email:
          type: string
      required:
        - campusName
        - address
        - contactPerson
        - phone
        - email

    RechargeRequest:
      type: object
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
          maximum: 10000
      required:
        - amount

    RechargeRecord:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        amount:
          type: number
          format: float
        balanceBefore:
          type: number
          format: float
        balanceAfter:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time

    QueryCoachRequest:
      type: object
      properties:
        username:
          type: string
      required:
        - username

    ApproveCoachRequest:
      type: object
      properties:
        coachId:
          type: string
        level:
          type: string
      required:
        - coachId
        - level

    ComsignupRequest:
      type: object
      properties:
        group:
          type: string
      required:
        - group

    ComQueryRequest:
      type: object
      properties:
        tableId:
          type: integer
        group:
          type: string
        myUsername:
          type: string
        opponentUsername:
          type: string
          nullable: true
      required:
        - tableId
        - group
        - myUsername

    CompetitionInfo:
      type: object
      properties:
        tableId:
          type: integer
        campusId:
          type: integer
        group:
          type: string
        player1Username:
          type: string
        player2Username:
          type: string

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "未登录或权限不足"

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
              message:
                type: string

    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string